class GaussianBlurGenerator
  def self.glsl(values, axis)
    offsets = values.offsets_l[1..].map.with_index do |offset, index|
      "float offset#{index + 1} = one_pixel * #{offset.to_f};"
    end

    if axis == "x"
      template = "coords.x + offset@, coords.y"
    else
      template = "coords.x, coords.y + offset@"
    end

    positives = values.weights_l[1..].map.with_index do |weight, index|
      "#{weight.to_f} * texture(sampler2D(t_input, s_input), vec2(#{template.sub("@", (index + 1).to_s)}))"
    end

    negatives = positives.map { |s| s.sub("+", "-") }

    summation = negatives.reverse + [
      "#{values.weights_l[0].to_f} * texture(sampler2D(t_input, s_input), coords)"
    ] + positives

    <<~GLSL
      #version 310 es

      precision mediump float;
      precision mediump sampler;

      layout(set=0, binding=0) uniform _0 { vec4 u_scaling; };

      layout(set=0, binding=1) uniform texture2D t_input;
      layout(set=0, binding=2) uniform sampler s_input;

      layout(location=0) out vec4 f_color;

      // Generated by https://github.com/tuzz/gaussian_blur_generator

      void main() {
        vec2 coords = gl_FragCoord.xy * u_scaling.xy;

        float one_pixel = u_scaling.#{axis};
        #{offsets.join("\n  ")}

        f_color = (
          #{summation.join(" +\n    ")}
        );
      }
    GLSL
  end
end
